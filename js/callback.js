// const numbers = [5, 10, 15, 20, 25];

// const logMessage = (number, index) => {
//   console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
// };

// numbers.forEach(logMessage);

// –Ü–º–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
// const numbers = [1, 2, 3, 4, 5];
// const filteredNumbers = [];

// for (let i = 0; i < numbers.length; i += 1) {
//   if (numbers[i] > 3) {
//     filteredNumbers.push(numbers[i]);
//   }
// }

// console.log(filteredNumbers); // [4, 5]


// const filter = function (array, test) {
//   const filterArray = [];
//   for (const el of array) {
//     // const passed = test(el);
//     if (test(el)) {
//       filterArray.push(el)
//     }
//     // console.log(el);
//   }
//   return filterArray;
// }

// 1. –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
// 2. —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
// 3. –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç true
// 3. –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –ù–ï —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç false

// const callback1 = function (value) {
//   return value >= 3;
// }

// const callback2 = function (value) {
//   return value <= 5;
// }
// console.log(filter([1, 2, 3, 4, 5,], callback1));
// console.log(filter([1, 2, 3, 4, 5, 6, 7, 8,], callback2));

// const fruits = [
//     { name: 'apples', quantity: 200, isFresh: true },
//     { name: 'grapes', quantity: 150, isFresh: false },
//     { name: 'bananas', quantity: 100, isFresh: true },
// ];

// const getfruitsQuantity = function (fruits) {
//   return fruits.quantity >= 120;
// }
// console.log(filter(fruits,getfruitsQuantity));

// =====================================

// const makeDish = function (sheffname, dish) {
//     console.log(`${sheffname} cook ${dish}`);
// }

// makeDish('mango','–ø–∏—Ä–æ–∂–æ–∫');
// makeDish('mango', '–æ–º–ª–µ—Ç');
// makeDish('mango', '—á–∞–π');

// makeDish('mango','–∫–æ—Ç–ª–µ—Ç—ã');
// makeDish('mango', 'soup');
// makeDish('mango', 'coffee');


// const makeSheff = function (name) {
//     const makeDish = function (dish) {
//         console.log(`${name} cook ${dish}`)
//     }
//     return makeDish
// };


// const mango = makeSheff('Mango');
// console.log(mango);

// mango('–ø–∏—Ä–æ–∂–æ–∫');
// mango('–æ–º–ª–µ—Ç');


// const poly = makeSheff('Poly');

// poly('coffee');



//  Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å —Ç–∞–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ ID, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —è–∫ id —ñ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// logProduct(product) - –∫–æ–ª–ª–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—î –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - –∫–æ–ª–ª–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

// function createProduct(partialProduct, callback) {
//     const obj = {
//         id: Date.now(),
//         ...partialProduct,
//     }
//     callback(obj)
//     // console.log(obj);
// }

// function logProduct(product) {
// console.log(product);
// };

// function logTotalPrice({price,quantity}) {
//        return price * quantity;
// }

// createProduct({
//     name: 'üçé',
//     price: 30,
//     quantity: 3,
// }, logProduct);

// createProduct({
//     name: 'üçã',
//     price: 20,
//     quantity: 5,
// },logTotalPrice)


// Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –î–æ–¥–∞–π—Ç–µ –æ–±'—î–∫—Ç—É account  –º–µ—Ç–æ–¥–∏ –∑ –∑–∞–ø–∏—Å–æ–º
// withdraw(amount, onSuccess, onError) —Ç–∞ deposit(amount, onSuccess, onError) –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞ –¥—Ä—É–≥–∏–π —ñ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–±–µ–∫–∏.
// –ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ this.balance —Ç–∞ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.
// –ú–µ—Ç–æ–¥ deposit  –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—å—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —Ç–∞ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// const TRANSACTION_LIMIT = 1000;

// const account = {
//     username: "Jacob",
//     balance: 2000,
//     withdraw(amount, onSuccess, onError) {
//         if (amount > this.balance) {
//             onError('–ú–∞–ª–æ –∫–æ—à—Ç—ñ–≤');
//         }
//         else if (amount > TRANSACTION_LIMIT) {
//             onError('–ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω–æ –ª–∏–º—ñ—Ç');
//         }
//         else {
//             this.balance -= amount;
//             onSuccess(`–£—Å–ø—ñ—Ö! —Å–ø–∏—Å–∞–Ω–æ ${amount}. –ó–∞–ª–∏—à–æ–∫ ${this.balance}`)
//         }
//     },
//     deposit(amount, onSuccess, onError) {
//         if (amount <=0) {
//             onError('–ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è')
//         }
//         else if (amount > TRANSACTION_LIMIT) {
//              onError('–ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω–æ –ª–∏–º—ñ—Ç');
//         } else {
//             this.balance += amount;
//             onSuccess(`–ö–æ—à—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω—ñ ${this.balance}`);
//         }
//     }
// }

// function handleSuccess(message) {
//     console.log(`Success ${message}`);
// }
// function handleError(message) {
//     console.log(`Error ${message}`);
// }


// account.withdraw(400, handleSuccess, handleError);
// account.withdraw(400, handleSuccess, handleError);
// account.withdraw(1500, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.withdraw(1500, handleSuccess, handleError);

// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);


// Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É. –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–±–±–µ–∫–∞.